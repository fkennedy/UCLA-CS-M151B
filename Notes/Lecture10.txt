Week 6 - Wednesday
4_8
Hazards
    Performance will drop
    CPI will be above 1.0 in the ideal case
    Three types of hazards:
        Data hazards
            Data is incorrect
        Control hazards
            Control is incorrect
        Structure hazards
            Resource utilization that won't work out

Example of Data Hazard
    add $3, $10, $11
        R[10] = 20
        R[11] = 22
        R[3]  = 6
        This should add 20+22, putting result 42 into $3
            Takes register values in R[10] and R[11] and put it into R[3]
    lw  $8, 50($3)
        This should load memory location R[3] added 50 into R[8]
    sub $11, $8, $7
        R[7] = 14
        This should subtract 14 from that just-loaded value
            Takes register values in R[8] and R[7] and put it into R[11]
    These 3 instructions are considered in a straight-lined chain dependencies
        Load word uses register value from add
        Subtract uses register value from load word
        Instructions uses register value from previous instructions

    The Pipeline in Execution:
        IF:  sub $11, $8, $7
        ID:  lw  $8, 50($3)
        EX:  add $3, $10, $11
        MEM: none
        WB:  none
        HAZARD:
            At ID stage, R[3] should have been "42", but instead it's still 6.
                It wasn't updated yet because add is still in execution

        IF:  add $10, $1, $2
        ID:  sub $11, $8, $7
        EX:  lw  $8, 50($3)
        MEM: add $3, $10, $11
        WB:  none
        HAZARD:
            At ID stage, R[8] should have been a value loaded from M[92] but instead it's still loading from M[16]
                It wasn't updated yet because lw is still in execution

        One instruction that depends on another instruction reads an incorrect data value because it hasn't been written

Hazard (continued)
    Situations that prevent starting the next instruction in the next cycle
    Structure hazards
        A required resource is busy
            Multiple instructions going through a pipeline at the same time 
            Both instructions need to make a use of the data port memory
            But we only have a single data port
            One instruction has to wait for one another
    Data hazard
        Need to wait for previous instruction to compete its data read/write
    Control hazard
        Deciding on control action depends on previous instruction
            Wait on a branch to resolve to know what our current PC should be

Structure Hazards
    Conflict for use of a resource
    In MIPS pipeline with a single memory
        Load/store requires data access
        Instruction fetch would have to stall for that cycle
            Would cause a pipeline "bubble"
                An opening in the pipeline
                    There are instructions that are not running while instructions before it are running ahead
                    This leaves a gap, which is essentially a "bubble"
                More "bubbles" will result in CPI >> 1
    Hence, pipelined datapaths require separate instruction/data memories
        Or separate instruction/data caches

Data Hazards
    An instruction depends on completion of data access by a previous instruction
    Have a different number of solutions
    Example:
        Code:
            add $s0, $t0, $t1
            sub $t2, $s0, $t3
        First, add instruction that writes to s0
        Then, sub instruction that reads from s0
        Stall the sub instruction with bubbles

    When a result is needed in the pipeline before it is available, a "data hazard" occurs
    Example:
        Code:
            sub  $2, $1, $3     [1]
            and $12, $2, $5     [2]
            or  $13, $6, $2     [3]
            and $14, $2, $2     [4]
            sw  $15, 100($2)    [5]
        R[2] is needed at the ID stage of the next instruction(s)
        R[2] is only available for the next instruction to use after the WB stage
            If [1] goes through the five stages, it means that R[2] is only available at Clock Cycle 5

        [5] isn't a problem
        [4] also isn't a problem
        [2] and [3] is going to have a problem

4_9
Dealing with Data Hazards
    Two ways:
        Software
            Insert independent instructions (or no-ops)
        Hardware
            Insert bubbles (i.e. stall the pipeline)
            Data forwarding

Dealing with Data Hazards in Software
    Software solutions, hardware will always expect there are no data hazards
        Big burden on software
        Ruins portability of software
        Machines with the same ISA may have different pipelines
        Two cycles of hazards to handle if there are back-to-back instructions
        Pipeline may have 3-4 or more, software should be aware
            Not favorable design
            Need for transparency
            Machine implementation in the life of portability
        Much easier to add software complexity than hardware

    Example:
        Code:
            sub  $2, $1, $3     [1]
            nop
            nop
            and $12, $2, $5     [2]
        Pipeline Diagram:
                    1   2   3   4   5   6   7   8
            sub     IF  ID  EX  MEM WB
            nop         IF  ID  EX  MEM WB
            nop             IF  ID  EX  MEM WB
            add                 IF  ID  EX  MEM WB
        We insert enough no-ops (or other instructions that don't use register 2) so that data hazard doesn't occur
    nop example: shift left 0
    Cycle Time isn't impacted
    Execution Time is longer
        CPI is increased

Code Scheduling to Avoid Stalls
    Reorder code to avoid use of load result in the next instruction
    C code:
        A = B + E;
        C = B + F;

        A: 12($t0)
        B:  0($t0)
        C: 16($t0)
        E:  4($t0)
        F:  8($t0)
    MIPS Before:
        lw  $t1, 0($t0)
        lw  $t2, 4($t0)
        STALL
        add $t3, $t1, $t2
        sw  $t3, 12($t0)
        lw  $t4, 8($t0)
        STALL
        add $t5, $t1, $t4
        sw  $t5, 16($t0)
        13 cycles
    MIPS After:
        lw  $t1, 0($t0)
        lw  $t2, 4($t0)
        lw  $t4, 8($t0)
        add $t3, $t1, $t2
        sw  $t3, 12($t0)
        add $t5, $t1, $t4
        sw  $t5, 16($t0)
        11 cycles
    This is essentially the same as using a no-ops instruction, but instead of an instruction that does nothing, it uses other MIPS instructions instead

Handling Data Hazards in Hardware
    Stall the pipeline
        Make a bubble in the next instruction and continue once the previous instruction has completed the WB stage
        Once we stall one of the stages in an instruction, the other instructinos are also stalled
            An instruction will not enter the IF stage if the previous instruction has not entered the ID stage
    Tradeoffs:
        *IN CLASS*
    More complicated example
        3 different register dependencies
            Gray: R[2]
            Red: R[12]
            Green: R[14]

Pipeline Stalls
    To insure proper pipeline execution in light of register dependecies, we must:
        Detect the hazard
        Stall the pipeline
            Prevent the IF and ID stages from making progress
                The ID stage because we can't go on until the dependent instruction complete correctly
                The IF stage because we do not want to lose any instructions

Stalling the Pipeline
    Prevent the IF and ID stages from proceeding
        Don't write the PC (PCWrite = 0)
        Don't rewrite the IF/ID register (IF/IDWrite = 0)
    Insert "nops"
        Set all control signals propagating to EX/MEM/WB to zero
            It becomes a nop (it's not a branch)
                It doesn't execute anything
                It doesn't read from memory
                It doesn't write anything

4_10
Forwarding (aka Bypassing)
    Use result when it is computed
        Don't wait for it to be stored in a register
        Requires extra connections in the datapath
    Even though we may not have written the value to the register file, the value may be ready at an earlier time than the WB stage
    Example:
        Code:
            add $s0, $t0, $t1
            sub $t2, $s0, $t3
        In the program execution, after the EX stage, the value is already ready
            But it won't be "ready at the register file" by the WB stage
            Instead, it's ready 2 full cycles early
        If there are no software nops or other mechanisms to handle hazards, then we would have to use hardware stalls
            But we can use forwarding
        In the pipeline diagram, the value of S[0] is ready at EX stage
            It's not in S[0], but we can communicate the value at the beginning of the add's MEM stage into sub's EX stage
            If we can communicate, we don't have to use hardware stalls
                We're forwarding the value from one instruction to another

Data Hazards in ALU Instructions
    Consider this sequence:
        sub  $2, $1, $3
        and $12, $2, $5
        or  $13, $6, $2
        add $14, $2, $2
        sw  $15, 100($2)
    All these instructions are chain-dependent
        R[2]
    Forwarding can solve the data dependencies
    We can resolve hazards with forwarding
        How do we detect when to forward?

Dependencies & Forwarding
    To determine when to forward, use a pipeline diagram to figure out when a certain register is needed and when will it be ready
        If the value of the register is needed before the WB stage, then we forward
            Forwarding occurs from the previous stage of the original instruction of when it is depended on
            In example:
                After EX of sub, it is passed on to EX of and
                After MEM of sub, it is passed on to EX of or
        If not then the value is passed like normal
    In example:
        Blue arrow indicates the dependencies
        Red line indicates the forwarding

Detecting the Need to Forward
    Pass register numbers along pipeline
        e.g. ID/EX.RegisterRs = register number for Rs sitting in ID/EX pipeline register
    Compare register destination from older instructions to the source rs/rt registers for younger instructions
    ALU operand register numbers in EX stage are given by
        ID/EX.RegisterRs, ID/EX.RegisterRt
    Data hazards when:
        1a. EX/MEM.RegisterRd = ID/EX.RegisterRs
        1b. EX/MEM.RegisterRd = ID/EX.RegisterRt
        2a. MEM/WB.RegisterRd = ID/EX.RegisterRs
        2b. MEM/WB.RegisterRd = ID/EX.RegisterRt
        
        #1 - Forward from EX/MEM pipeline register
        #2 - Forward from MEM/WB pipeline register

        ID/EX  - Will be executed next
        EX/MEM - Currently executing
        MEM/WB - Currently being written back

    In addition, we also need to know if the register is being written. We have to check the
        EX/MEM.RegWrite
        MEM/WB.RegWrite
    Avoid forwarding when it's writing to a zero register (it's a no-ops instruction)
        EX/MEM.RegisterRd != 0
        MEM/WB.RegisterRd != 0

Forwarding Paths
    As all the data is passed around, we need to make sure that the right data is used for each registers
    We create a forwarding unit that connects to 2 MUXs
        One for rs
            ForwardA
        One for rt
            ForwardB
    ForwardA and ForwardB are select signals from the forwarding unit and there are 3 cases that rs/rt will get data from
        1. As usual from the ID/EX latch
        2. Forwarded from the MEM/WB latch
        3. Forwarded from the EX/MEM latch
    Missing from the diagram:
        RegWrite

Forwarding Conditions
    EX hazard
        if (EX/MEM.RegWrite and (EX/MEM.RegisterRd != 0) and (EX/MEM.RegisterRd = ID/EX.RegisterRs))
            ForwardA = 10
        if (EX/MEM.RegWrite and (EX/MEM.RegisterRd != 0) and (EX/MEM.RegisterRd = ID/EX.RegisterRt))
            ForwardB = 10
    MEM hazard
        if (MEM/WB.RegWrite and (MEM/WB.RegisterRd != 0) and (MEM/WB.RegisterRd = ID/EX.RegisterRs))
            ForwardA = 01
        if (MEM/WB.RegWrite and (MEM/WB.RegisterRd != 0) and (MEM/WB.RegisterRd = ID/EX.RegisterRt))
            ForwardB = 01
    No hazard
        ForwardA = 00
        ForwardB = 00

Double Data Hazard
    Consider the sequence:
        add $1, $1, $2
        add $1, $1, $3
        add $1, $1, $4
    Both hazards occurring
        Therefore, we want to use the most recent
    Revise MEM hazard condition
        Only forward if EX hazard condition isn't true

Forwarding Conditions (Updated)
    MEM hazard
        if (MEM/WB.RegWrite and (MEM/WB.RegisterRd != 0) and not (EX/MEM.RegWrite and (EX/MEM.RegisterRd != 0) and (EX/MEM.RegisterRd = ID/EX.RegisterRs))
            ForwardA = 01
        if (MEM/WB.RegWrite and (MEM/WB.RegisterRd != 0) and not (EX/MEM.RegWrite and (EX/MEM.RegisterRd != 0 and (EX/MEM.RegisterRd = ID/EX.RegisterRt))
            ForwardB = 01

4_11
Load-Use Data Hazard
    There are some cases where we can't always avoid stalls by forwarding
        If value isn't computed when needed
        Can't forward back in time
    Example will be a load instruction
        Value isn't ready until after MEM stage
        In diagram:
            If there's no bubble, S[0] is needed at the 3rd cycle
    If we lengthen the cycle time for each instruction, we will lengthen the cycle time for the whole process
    There is no way to forward the value from the EX stage (because loading is grabbing the value from the memory)

Load-Use Hazard Detection
    We solve the load-use hazard with a stall
    Check when using instruction is decoded in ID stage
    ALU operand register numbers in ID stage are given by
        IF/ID.RegisterRs, IF/ID.RegisterRt
    Load-use hazard when
        ID/EX.MemRead and ((ID/EX.RegisterRt = IF/ID.RegisterRs) or (ID/Ex.RegisterRt = IF/ID.RegisterRt))
    If detected, stall and insert bubble

How to stall the pipeline
    Force control values in ID/EX register to 0
        EX, MEM and WB do nop (no-operation)
    Prevent update of PC and IF/ID register
        Using instruction is decoded again
        Following instruction is fetched again
        1-cycle stall allows MEM to read data for lw
            Can subsequently forward to EX stage of next instruction

Datapath with Hazard Detection
    Hazard detection unit
        Inputs:
            ID/EX.MemRead
        Output:
            Selector for MUX (to determine whether to insert a bubble or not)
            IF/IDWrite
            PCWrite